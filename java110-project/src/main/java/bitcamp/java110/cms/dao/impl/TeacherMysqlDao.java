package bitcamp.java110.cms.dao.impl;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import bitcamp.java110.cms.dao.DaoException;
import bitcamp.java110.cms.dao.TeacherDao;
import bitcamp.java110.cms.domain.Teacher;
import bitcamp.java110.cms.util.DataSource;

@Component
public class TeacherMysqlDao implements TeacherDao {
    
    DataSource dataSource;
    @Autowired
    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public int insert(Teacher teacher) {
        Connection con =null;
        Statement stmt =null;
        try {


           con =dataSource.getConnection();
            //매니저 정보를 입력할 때 p1_memb테이블과 p1_mgr테이블에
            //매니저 정보를 분산 입력해야 한다.
            //두 테이블에 몯 ㅜ입력 성공할 때 입력을 완료하도록
            //두 insert를 한 작업(transaction)으로 묶는다.
            //=>SQL을 서버에 보낸 후 클라이언트가 최종완료 신호를 
            //보내기 전까지는 처리를 보류하도록 설정한다.
            con.setAutoCommit(false);

            stmt = con.createStatement();
            String sql=("insert into p1_memb(name, email, pwd, tel, cdt)"
                    +" values('"
                    + teacher.getName()+"','"
                    + teacher.getEmail()+"',password('"
                    + teacher.getPassword()+"'),'"
                    + teacher.getTel()+"',now())");
            //p1_memb 테이블에 회원 기본 정보를 입력 한후
            //자동으로 생성된 회원 번호를 리턴 받는다.
            stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);

            //insert를 실행한 후 리턴 받은 자동증가 PK 값을 꺼낸다.
            //ResultSet의 경우 첫번째 컬럼이 1부터 시작한다.
            ResultSet autogeneratedKeys = stmt.getGeneratedKeys();
            autogeneratedKeys.next();
            int memberNo = autogeneratedKeys.getInt(1);
            autogeneratedKeys.close();

            //회원 번호로 매니저 테이블에 직위 정보를 입력한다.
            String sql2 = "insert into p1_tchr(tno,hrpay,subj) "
                    + "values("
                    + memberNo+","
                    + teacher.getPay()+",'"
                    +teacher.getSubjects()+"')";
            stmt.executeUpdate(sql2);

            //두 insert가 모두 성공 했을 때만 서버에 완료 신호를 보낸다.
            con.commit();
            return 1;
        }
        catch(Exception e){
            try {con.rollback();}catch(Exception e2) {}
            throw new DaoException(e);
        }finally {
            
            try {stmt.close();}catch(Exception e) {}

        }
    }

    public List<Teacher> findAll() {
        ArrayList<Teacher> list = new ArrayList<>();
        Connection con =null;
        Statement stmt =null;
        ResultSet rs = null;
        try {
           

            con = dataSource.getConnection();
            
            stmt = con.createStatement();
            rs =stmt.executeQuery("select" + 
                    " m.mno," +
                    " m.name," + 
                    " m.email," +
                    " m.tel," +
                    " t.hrpay," +
                    " t.subj" +
                    " from p1_tchr t"+ 
                    " join p1_memb m on t.tno=m.mno");
         
            while(rs.next()) {
                Teacher tch = new Teacher();
                tch.setNo(rs.getInt("mno"));                
                tch.setEmail(rs.getString("email"));
                tch.setName(rs.getString("name"));
                tch.setTel(rs.getString("tel"));
                tch.setPay(rs.getInt("hrpay"));
                tch.setSubjects(rs.getString("subj"));

                list.add(tch);
            }
        }catch(Exception e){
            throw new DaoException(e);
        }finally {
          
            try {stmt.close();}catch(Exception e) {}
            try {rs.close();}catch(Exception e) {}
        }
        return list;
    }

    public Teacher findByEmail(String email) {
        Connection con =null;
        Statement stmt =null;
        ResultSet rs = null;
        try {

            
            con = dataSource.getConnection();
            stmt = con.createStatement();
            rs =stmt.executeQuery("select" + 
                    " m.mno," +
                    " m.name," + 
                    " m.email," +
                    " m.tel," + 
                    " t.hrpay," +
                    " t.subj" +
                    " from p1_tchr t"+ 
                    " join p1_memb m on t.tno=m.mno"+
                    " where m.email='"+email+"'");
            if(rs.next()) {
                Teacher tch = new Teacher();
                tch.setNo(rs.getInt("mno"));                
                tch.setEmail(rs.getString("email"));
                tch.setName(rs.getString("name"));
                tch.setTel(rs.getString("tel"));
                tch.setPay(rs.getInt("hrpay"));
                tch.setSubjects(rs.getString("subj"));



                return tch;
            }
            return null;
        }catch(Exception e){
            throw new DaoException(e);
        }finally {
            try {stmt.close();}catch(Exception e) {}
            try {rs.close();}catch(Exception e) {}
        }
    }

    public Teacher findByNo(int no) {
        Connection con =null;
        Statement stmt =null;
        ResultSet rs = null;
        try {

            
            con = dataSource.getConnection();
            stmt = con.createStatement();
            rs =stmt.executeQuery("select" + 
                    " m.mno," +
                    " m.name," + 
                    " m.email," +
                    " m.tel," + 
                    " t.hrpay," +
                    " t.subj" +
                    " from p1_tchr t"+ 
                    " join p1_memb m on t.tno=m.mno"+
                    " where m.mno="+no);
            if(rs.next()) {
                Teacher tch = new Teacher();
                tch.setNo(rs.getInt("mno"));                
                tch.setEmail(rs.getString("email"));
                tch.setName(rs.getString("name"));
                tch.setTel(rs.getString("tel"));
                tch.setPay(rs.getInt("hrpay"));
                tch.setSubjects(rs.getString("subj"));
                return tch;
            }
            return null;
        }catch(Exception e){
            throw new DaoException(e);
        }finally {
           
            try {stmt.close();}catch(Exception e) {}
            try {rs.close();}catch(Exception e) {}
        }
    }

    public int deleteByNo(int no) {
        Connection con =null;
        Statement stmt =null;
        try 
        {
            con = dataSource.getConnection();
            con.setAutoCommit(false);

            stmt = con.createStatement();
            String sql="delete from p1_tchr where tno="+no;
            int count = stmt.executeUpdate(sql);
            if(count==0)
                return 0;


            String sql2 = "delete from p1_memb where mno="+no;
            count = stmt.executeUpdate(sql2);

            con.commit();
            return count;
        }
        catch(Exception e){
            try {con.rollback();}catch(Exception e2) {}
            throw new DaoException(e);
        }finally {
          
            try {stmt.close();}catch(Exception e) {}

        }
    }
}
